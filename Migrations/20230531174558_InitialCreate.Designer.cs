// <auto-generated />
using System;
using BrewTrack.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrewTrack.Migrations
{
    [DbContext(typeof(BrewTrackDbContext))]
    [Migration("20230531174558_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BrewTrack.Models.ApiSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ApiSourceId");

                    b.Property<string>("ApiSourceName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("api_sources");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93255bfd-fb9d-436f-bd8d-1d1980f406f8"),
                            ApiSourceName = "Weather",
                            DateCreated = new DateTime(2023, 5, 31, 17, 45, 58, 741, DateTimeKind.Utc).AddTicks(7441)
                        },
                        new
                        {
                            Id = new Guid("e8631575-a228-4bcc-acf8-816e00a8bc1d"),
                            ApiSourceName = "Brewery",
                            DateCreated = new DateTime(2023, 5, 31, 17, 45, 58, 741, DateTimeKind.Utc).AddTicks(7443)
                        });
                });

            modelBuilder.Entity("BrewTrack.Models.BrewPub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("brewPubId");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Website_Uri")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("brewpubs");
                });

            modelBuilder.Entity("BrewTrack.Models.CachedTimeline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApiSourceRefId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ApiSourceRefId");

                    b.HasIndex("Date")
                        .IsDescending();

                    b.ToTable("cached_timeline");
                });

            modelBuilder.Entity("BrewTrack.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("UserId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("BrewTrack.Models.UserHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserHistoryId");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("user_history");
                });

            modelBuilder.Entity("BrewTrack.Models.CachedTimeline", b =>
                {
                    b.HasOne("BrewTrack.Models.ApiSource", null)
                        .WithMany("Timeline")
                        .HasForeignKey("ApiSourceRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BrewTrack.Models.ApiSource", b =>
                {
                    b.Navigation("Timeline");
                });
#pragma warning restore 612, 618
        }
    }
}
